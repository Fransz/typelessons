// Generated by CoffeeScript 1.7.1
var generate, initialize, sample, _;

_ = require('underscore');

exports.sample = sample = function(values, distribution, cnt) {
  var aTable, pTable, _i, _ref, _results;
  if (!values.length) {
    throw new Error("Cannot sample, arrays are unequal sized.");
  }
  if (values.length !== distribution.length) {
    throw new Error("Cannot sample, arrays are unequal sized.");
  }
  if (_.reduce(distribution, (function(m, v) {
    return m + v;
  }), 0) !== 1) {
    throw new Error("Cannot sample, probabilities do not count up to 1.");
  }
  _ref = initialize(distribution), pTable = _ref[0], aTable = _ref[1];
  _results = [];
  for (_i = 0; 0 <= cnt ? _i < cnt : _i > cnt; 0 <= cnt ? _i++ : _i--) {
    _results.push(generate(values, pTable, aTable));
  }
  return _results;
};

exports.initialize = initialize = function(distribution) {
  var aTable, l, ls, pTable, p_, p_avg, ps, s, ss;
  ss = [];
  ls = [];
  p_avg = 1 / distribution.length;
  pTable = _.map(distribution, function() {
    return void 0;
  });
  aTable = _.map(distribution, function() {
    return void 0;
  });
  ps = _.map(distribution, function(p) {
    return p / p_avg;
  });
  _.each(ps, function(p, i) {
    if (p < 1) {
      return ss.unshift(i);
    } else {
      return ls.unshift(i);
    }
  });
  while (ss.length && ls.length) {
    s = ss.shift();
    pTable[s] = ps[s];
    l = ls.shift();
    aTable[s] = l;
    p_ = (ps[l] + ps[s]) - 1;
    ps[l] = p_;
    if (p_ < 1) {
      ss.unshift(l);
    } else {
      ls.unshift(l);
    }
  }
  while (ls.length) {
    pTable[ls.shift()] = 1;
  }
  while (ss.length) {
    pTable[ss.shift()] = 1;
  }
  return [pTable, aTable];
};

exports.generate = generate = function(values, pTable, aTable) {
  var coin, die;
  die = Math.floor(Math.random() * values.length);
  coin = Math.random();
  if (coin < pTable[die]) {
    return values[die];
  } else {
    return values[aTable[die]];
  }
};
